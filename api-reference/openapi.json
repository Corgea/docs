{
  "openapi": "3.0.0",
  "info": {
    "title": "Corgea API",
    "version": "1.0.0",
    "description": "API for interacting with Corgea's scanning and vulnerability management features"
  },
  "servers": [
    {
      "url": "https://www.corgea.app/api/v1",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "CorgeaToken": []
    }
  ],
  "paths": {
    "/verify/{token}": {
      "get": {
        "summary": "Verify Token (Deprecated)",
        "operationId": "verifyTokenDeprecated",
        "tags": ["Authentication"],
        "security": [],
        "deprecated": true,
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The token to be verified"
          }
        ],
        "responses": {
          "200": {
            "description": "Token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/verify": {
      "get": {
        "summary": "Verify Token",
        "operationId": "verifyToken",
        "tags": ["Authentication"],
        "description": "Verify the API token and optionally return user information",
        "parameters": [
          {
            "name": "user_info",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to include user information in the response"
          }
        ],
        "responses": {
          "200": {
            "description": "Token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "user": {
                      "type": "object",
                      "description": "User information (only included if user_info=true)",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "email": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "company": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scans": {
      "get": {
        "summary": "Get Scans",
        "operationId": "getScans",
        "tags": ["Scans"],
        "description": "Retrieves a list of scans for the authenticated user's company",
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter scans by project name"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "The page number for pagination"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 50
            },
            "description": "The number of results per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Scans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "scans": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "engine": {
                            "type": "string",
                            "example": "corgea"
                          },
                          "project": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "repo": {
                            "type": "string"
                          },
                          "branch": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string",
                            "enum": ["completed", "in_progress", "failed"]
                          },
                          "pull_request_id": {
                            "type": "integer",
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scan/{scan_id}": {
      "get": {
        "summary": "Get Scan",
        "operationId": "getScan",
        "tags": ["Scans"],
        "description": "Retrieves details of a specific scan",
        "parameters": [
          {
            "name": "scan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the scan"
          }
        ],
        "responses": {
          "200": {
            "description": "Scan details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "project": {
                      "type": "string"
                    },
                    "repo": {
                      "type": "string"
                    },
                    "branch": {
                      "type": "string"
                    },
                    "scan_status": {
                      "type": "string",
                      "enum": ["completed", "in_progress", "failed"]
                    },
                    "engine": {
                      "type": "string"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Scan not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Scan doesn't exist"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scan/{scan_id}/report": {
      "get": {
        "summary": "Get Scan Report",
        "operationId": "getScanReport",
        "tags": ["Scans", "Reports"],
        "description": "Retrieve scan report in HTML or SARIF format",
        "parameters": [
          {
            "name": "scan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the scan"
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["sarif", "html"],
              "default": "sarif"
            },
            "description": "Report format (html or sarif)"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "cwe"
            },
            "description": "View type for HTML reports"
          },
          {
            "name": "urgency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["CR", "HI", "ME", "LO"]
            },
            "description": "Filter by urgency level"
          }
        ],
        "responses": {
          "200": {
            "description": "Report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "description": "SARIF report when format=sarif",
                  "type": "object"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string",
                  "description": "HTML report when format=html"
                }
              }
            },
            "headers": {
              "Content-Disposition": {
                "description": "Filename for download when format=sarif",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Scan not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Scan not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Report generation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "SARIF export failed. Please try again later or contact support."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scan/{scan_id}/check_blocking_rules": {
      "get": {
        "summary": "Check Blocking Rules",
        "operationId": "checkBlockingRules",
        "tags": ["Scans", "Policies"],
        "description": "Check if scan issues violate any blocking rules",
        "parameters": [
          {
            "name": "scan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the scan"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "The page number for pagination"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 50
            },
            "description": "The number of results per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Blocking rules check completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block": {
                      "type": "boolean",
                      "description": "Whether the scan is blocked by any rules"
                    },
                    "blocking_issues": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "triggered_by_rules": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "stats": {
                      "type": "object",
                      "properties": {
                        "total_issues": {
                          "type": "integer"
                        },
                        "blocked_issues": {
                          "type": "integer"
                        }
                      }
                    },
                    "page": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Scan not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "SAST scan not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/issues": {
      "get": {
        "summary": "List All Issues",
        "operationId": "listIssues",
        "tags": ["Issues"],
        "description": "Retrieve a list of all security issues for the authenticated user's company",
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter issues by project name"
          },
          {
            "name": "repo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter issues by repository URL"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "The page number for pagination"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 50
            },
            "description": "The number of results per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Issues retrieved successfully or no project found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "ok"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_issues": {
                          "type": "integer"
                        },
                        "issues": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Issue"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "no_project_found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/scan/{scan_id}/issues": {
      "get": {
        "summary": "Get Issues for Scan",
        "operationId": "getScanIssues",
        "tags": ["Issues"],
        "description": "Retrieves a list of issues for a specific scan",
        "parameters": [
          {
            "name": "scan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the scan"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "The page number for pagination"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 50
            },
            "description": "The number of results per page"
          },
          {
            "name": "urgency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by urgency levels (comma-separated). Valid values: CR, HI, ME, LO",
            "example": "CR,HI"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by status (comma-separated). Valid values: fixed, false_positive, accepted_risk, open, fix_in_progress, duplicate",
            "example": "open,fix_in_progress"
          },
          {
            "name": "confidence",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by confidence levels (comma-separated). Valid values: HI, ME, LO",
            "example": "HI,ME"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by programming language (case-insensitive)",
            "example": "python"
          },
          {
            "name": "file_path",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by file path (partial match)",
            "example": "src/auth"
          },
          {
            "name": "classification",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by classification/CWE (partial match)",
            "example": "CWE-89"
          },
          {
            "name": "sla_status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by SLA status (comma-separated). Valid values: overdue, escalated",
            "example": "overdue"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "urgency",
                "-urgency",
                "status",
                "-status",
                "classification",
                "-classification"
              ]
            },
            "description": "Sort results by field (prefix with '-' for descending order)",
            "example": "-created_at"
          }
        ],
        "responses": {
          "200": {
            "description": "Issues retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "total_issues": {
                      "type": "integer"
                    },
                    "issues": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Issue"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Scan not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Scan not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/issue/{issue_id}": {
      "get": {
        "summary": "Get Issue",
        "operationId": "getIssue",
        "tags": ["Issues"],
        "description": "Retrieves details of a specific issue",
        "parameters": [
          {
            "name": "issue_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the issue"
          },
          {
            "name": "show_full_code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to include the full code in the response"
          }
        ],
        "responses": {
          "200": {
            "description": "Issue details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "issue": {
                      "$ref": "#/components/schemas/IssueDetail"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Issue not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Issue not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/issues/sca": {
      "get": {
        "summary": "Get SCA Issues",
        "operationId": "listScaIssues",
        "tags": ["Issues", "SCA"],
        "description": "Retrieve a list of Software Composition Analysis (SCA) issues",
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter SCA issues by project name"
          },
          {
            "name": "repo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter SCA issues by repository URL"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "The page number for pagination"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 50
            },
            "description": "The number of results per page"
          },
          {
            "name": "severity",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by severity levels (comma-separated). Valid values: CRITICAL, HIGH, MEDIUM, LOW",
            "example": "CRITICAL,HIGH"
          },
          {
            "name": "package",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by package name (partial match)",
            "example": "lodash"
          },
          {
            "name": "ecosystem",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by package ecosystem (case-insensitive)",
            "example": "npm"
          },
          {
            "name": "cve",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by CVE identifier (partial match)",
            "example": "CVE-2021"
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by file path (partial match)",
            "example": "package.json"
          },
          {
            "name": "has_fix",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by whether a fix is available (true/false)",
            "example": true
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "severity",
                "-severity",
                "package",
                "-package",
                "ecosystem",
                "-ecosystem"
              ]
            },
            "description": "Sort results by field (prefix with '-' for descending order)",
            "example": "-severity"
          }
        ],
        "responses": {
          "200": {
            "description": "SCA issues retrieved successfully or no project found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "ok"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_issues": {
                          "type": "integer"
                        },
                        "issues": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SCAIssue"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "no_project_found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/scan/{scan_id}/issues/sca": {
      "get": {
        "summary": "Get SCA Issues for Scan",
        "operationId": "getScanScaIssues",
        "tags": ["Issues", "SCA"],
        "description": "Retrieve SCA issues for a specific scan",
        "parameters": [
          {
            "name": "scan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the scan"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "The page number for pagination"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 50
            },
            "description": "The number of results per page"
          },
          {
            "name": "severity",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by severity levels (comma-separated). Valid values: CRITICAL, HIGH, MEDIUM, LOW",
            "example": "CRITICAL,HIGH"
          },
          {
            "name": "package",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by package name (partial match)",
            "example": "lodash"
          },
          {
            "name": "ecosystem",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by package ecosystem (case-insensitive)",
            "example": "npm"
          },
          {
            "name": "cve",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by CVE identifier (partial match)",
            "example": "CVE-2021"
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by file path (partial match)",
            "example": "package.json"
          },
          {
            "name": "has_fix",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by whether a fix is available (true/false)",
            "example": true
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "severity",
                "-severity",
                "package",
                "-package",
                "ecosystem",
                "-ecosystem"
              ]
            },
            "description": "Sort results by field (prefix with '-' for descending order)",
            "example": "-severity"
          }
        ],
        "responses": {
          "200": {
            "description": "SCA issues retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "total_issues": {
                      "type": "integer"
                    },
                    "issues": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SCAIssue"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Scan not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Scan not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/start-scan": {
      "post": {
        "summary": "Start New Scan",
        "operationId": "startScan",
        "tags": ["Starting Corgea Scan"],
        "description": "Initiates a new BLAST scan with file upload. Accepts one or more files for scanning.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["scan_type", "files"],
                "properties": {
                  "scan_type": {
                    "type": "string",
                    "enum": ["blast"],
                    "default": "blast",
                    "description": "Currently only blast scan is supported"
                  },
                  "repo_url": {
                    "type": "string",
                    "description": "The URL of the repository (optional)"
                  },
                  "branch": {
                    "type": "string",
                    "description": "The branch to be scanned (optional)"
                  },
                  "sha": {
                    "type": "string",
                    "description": "The commit SHA to be scanned (optional)"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Source code files to be scanned. For BLAST scans, only a single file is currently supported."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Scan initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully initiated upload at /tmp/uploads/transfer_id"
                    },
                    "transfer_id": {
                      "type": "string",
                      "format": "uuid",
                      "example": "c9b0a8c7-f9b4-4c10-9d58-cd4c7e1c9c52"
                    },
                    "status": {
                      "type": "string",
                      "enum": ["OK"],
                      "example": "OK"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "No files uploaded for blast"
                    }
                  }
                },
                "examples": {
                  "no_files": {
                    "summary": "No files uploaded",
                    "value": {
                      "status": "error",
                      "message": "No files uploaded for blast"
                    }
                  },
                  "multiple_files": {
                    "summary": "Multiple files for BLAST scan",
                    "value": {
                      "status": "error",
                      "message": "Multiple files uploaded for blast"
                    }
                  },
                  "scan_not_enabled": {
                    "summary": "Scan type not enabled",
                    "value": {
                      "status": "error",
                      "message": "Only Blast scan is currently enabled by the API"
                    }
                  },
                  "file_validation_error": {
                    "summary": "File validation failed",
                    "value": {
                      "status": "error",
                      "message": "File validation error: Invalid file type or size"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/start-scan/{transfer_id}": {
      "patch": {
        "summary": "Continue Scan Upload",
        "operationId": "continueScanUpload",
        "tags": ["Starting Corgea Scan"],
        "description": "Continue uploading chunks for an existing scan",
        "parameters": [
          {
            "name": "transfer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The transfer ID from the initial scan request"
          },
          {
            "name": "Upload-Offset",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Current byte offset of the upload"
          },
          {
            "name": "Upload-Length",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Total size of the file in bytes"
          },
          {
            "name": "Upload-Name",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the file being uploaded"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["chunk_data"],
                "properties": {
                  "chunk_data": {
                    "type": "string",
                    "format": "binary",
                    "description": "The next chunk of data for the scan"
                  },
                  "project_name": {
                    "type": "string"
                  },
                  "branch": {
                    "type": "string"
                  },
                  "repo_url": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  },
                  "partial_scan": {
                    "type": "boolean"
                  },
                  "files_to_scan": {
                    "type": "string",
                    "description": "Comma-separated list of files to scan"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chunk uploaded successfully",
            "headers": {
              "Upload-Offset": {
                "schema": {
                  "type": "integer"
                },
                "description": "Current upload offset after this chunk"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "transfer_id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "message": {
                          "type": "string",
                          "example": "Chunk uploaded successfully."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Returned when upload is complete",
                      "properties": {
                        "scan_id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "1a5afaa3-72ac-458f-a492-ac40ffc88e76"
                        },
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "message": {
                          "type": "string",
                          "example": "Chunk uploaded successfully."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request: 'chunk_data' file not found."
                    },
                    "internal_detail": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "head": {
        "summary": "Check Upload Status",
        "operationId": "checkUploadStatus",
        "tags": ["Starting Corgea Scan"],
        "description": "Check the current status of an upload",
        "parameters": [
          {
            "name": "transfer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The transfer ID to check"
          }
        ],
        "responses": {
          "200": {
            "description": "Upload status retrieved",
            "headers": {
              "Upload-Offset": {
                "schema": {
                  "type": "integer"
                },
                "description": "Current upload offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["success", "error"],
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Offset calculated"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid transfer ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid transfer ID."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scan-upload": {
      "post": {
        "summary": "Upload Scan",
        "operationId": "scanUpload",
        "tags": ["Uploading 3rd Party Scan"],
        "description": "Upload a completed scan report from CLI tools. This endpoint receives pre-generated scan results from Semgrep, Snyk, Checkmarx, CodeQL, and Fortify and integrates them into the system.",
        "parameters": [
          {
            "name": "run_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the run associated with the scan report"
          },
          {
            "name": "engine",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["checkmarx", "codeql", "fortify", "semgrep", "snyk"]
            },
            "description": "The engine used for the scan"
          },
          {
            "name": "project",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the project"
          },
          {
            "name": "repo_data",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Base64-encoded JSON string containing repository information (branch_name, integration_url, etc.)"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The scan report content as UTF-8 text (typically SARIF or JSON format)",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Scan report uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "invalid content"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/git-config-upload": {
      "post": {
        "summary": "Upload Git Config",
        "operationId": "gitConfigUpload",
        "tags": ["Uploading 3rd Party Scan"],
        "description": "Upload Git configuration data for a specific scan run to help with repository URL parsing and analysis.",
        "parameters": [
          {
            "name": "run_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The scan run ID associated with this Git configuration"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Raw Git configuration data as UTF-8 text",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Git config uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["ok"],
                      "example": "ok"
                    }
                  },
                  "required": ["status"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "missing run_id"
                    }
                  }
                },
                "examples": {
                  "missing_run_id": {
                    "summary": "Missing run_id parameter",
                    "value": {
                      "status": "missing run_id"
                    }
                  },
                  "invalid_content": {
                    "summary": "Content validation failed",
                    "value": {
                      "status": "invalid content"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/code-upload": {
      "post": {
        "summary": "Upload Source Code File",
        "operationId": "codeUpload",
        "tags": ["Uploading 3rd Party Scan"],
        "description": "Upload individual source code files for a specific scan run. This is used to upload the actual source files that will be analyzed.",
        "parameters": [
          {
            "name": "run_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The scan run ID associated with this file"
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The repository path of the file being uploaded"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["file"],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The source code file to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Source code file uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["ok"],
                      "example": "ok"
                    }
                  },
                  "required": ["status"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "missing run_id"
                    }
                  }
                },
                "examples": {
                  "missing_run_id": {
                    "summary": "Missing run_id parameter",
                    "value": {
                      "status": "missing run_id"
                    }
                  },
                  "missing_path": {
                    "summary": "Missing path parameter",
                    "value": {
                      "status": "missing path"
                    }
                  },
                  "no_file_provided": {
                    "summary": "No file uploaded",
                    "value": {
                      "status": "no_file_provided"
                    }
                  },
                  "invalid_content": {
                    "summary": "File content validation failed",
                    "value": {
                      "status": "invalid content"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ci-data-upload": {
      "post": {
        "summary": "Upload CI/CD Data",
        "operationId": "ciDataUpload",
        "tags": ["Uploading 3rd Party Scan"],
        "description": "Upload CI/CD pipeline metadata and context information for a specific scan run.",
        "parameters": [
          {
            "name": "run_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The scan run ID associated with this CI data"
          },
          {
            "name": "platform",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The CI/CD platform name (e.g., jenkins, github-actions, gitlab-ci)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "CI/CD pipeline metadata and context information",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "CI data uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["ok"],
                      "example": "ok"
                    }
                  },
                  "required": ["status"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - JSON parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid JSON format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Scan not found for the provided run_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unable to find scan associated to this run id"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blocking-rules": {
      "get": {
        "summary": "List Blocking Rules",
        "operationId": "listBlockingRules",
        "tags": ["Policies"],
        "description": "Retrieve all blocking rules for the authenticated user's company",
        "responses": {
          "200": {
            "description": "Blocking rules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "blocking_rules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BlockingRule"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Missing or invalid authorization header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An error occurred while fetching blocking rules"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "CorgeaToken": {
        "type": "apiKey",
        "in": "header",
        "name": "CORGEA-TOKEN",
        "description": "API key for authentication"
      }
    },
    "schemas": {
      "Issue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "classification": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "CWE-123"
              },
              "name": {
                "type": "string",
                "example": "Vulnerability Name"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "urgency": {
            "type": "string",
            "enum": ["critical", "high", "medium", "low"]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "fixed",
              "accepted_risk",
              "false_positive"
            ]
          },
          "sla_status": {
            "type": "string",
            "enum": ["on_track", "due", "overdue"]
          },
          "location": {
            "$ref": "#/components/schemas/IssueLocation"
          },
          "auto_triage": {
            "$ref": "#/components/schemas/AutoTriage"
          },
          "auto_fix_suggestion": {
            "$ref": "#/components/schemas/AutoFixSuggestion"
          }
        }
      },
      "IssueDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "scan_id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "fixed",
              "accepted_risk",
              "false_positive"
            ]
          },
          "urgency": {
            "type": "string",
            "enum": ["critical", "high", "medium", "low"]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "classification": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "CWE-123"
              },
              "name": {
                "type": "string",
                "example": "Vulnerability Name"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "location": {
            "$ref": "#/components/schemas/IssueLocation"
          },
          "details": {
            "type": "object",
            "properties": {
              "explanation": {
                "type": "string"
              }
            }
          },
          "auto_triage": {
            "$ref": "#/components/schemas/AutoTriage"
          },
          "auto_fix_suggestion": {
            "$ref": "#/components/schemas/AutoFixSuggestion"
          }
        }
      },
      "IssueLocation": {
        "type": "object",
        "properties": {
          "file": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "path": {
                "type": "string"
              }
            }
          },
          "project": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "branch": {
                "type": "string"
              },
              "git_sha": {
                "type": "string"
              }
            }
          },
          "line_number": {
            "type": "integer"
          }
        }
      },
      "AutoTriage": {
        "type": "object",
        "properties": {
          "false_positive_detection": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": ["valid", "false_positive", "pending"]
              },
              "reasoning": {
                "type": "string"
              }
            }
          }
        }
      },
      "AutoFixSuggestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": ["fix_available", "fix_not_available", "pending"]
          },
          "patch": {
            "type": "object",
            "properties": {
              "diff": {
                "type": "string",
                "description": "Unified diff format patch"
              },
              "explanation": {
                "type": "string",
                "description": "Explanation of how the fix addresses the vulnerability"
              }
            }
          }
        }
      },
      "SCAIssue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "severity": {
            "type": "string",
            "enum": ["critical", "high", "medium", "low"]
          },
          "cve": {
            "type": "string",
            "description": "CVE identifier if available"
          },
          "package": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "ecosystem": {
                "type": "string"
              },
              "fix_version": {
                "type": "string",
                "description": "Version that fixes the vulnerability"
              }
            }
          },
          "location": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the file containing the vulnerable package"
              }
            }
          }
        }
      },
      "BlockingRule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "urgencies": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["critical", "high", "medium", "low"]
            }
          },
          "classifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}
